import openai, asyncio
from config import *
from aiogram import Dispatcher, Bot, executor, types
from bd_handlers import create_table_if_not_exists, add_or_check_phone, user_logged, ai_field_update, ai_exists, tryes_plus_one
from kbs import send_phone_kb, choose_ai_kb

bot = Bot(TGToken)
dp = Dispatcher(bot)

#–ü–æ–¥–∫–ª—é—á–∞–µ–º API
openai.api_key = GPTToken
#–í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
all_messages = {}

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –∫ Chat Gpt
def sent_question(messages):
    completion = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=messages
        )
    
    return completion






# –ö–æ–º–∞–Ω–¥–∞ START
@dp.message_handler(commands=["start"])
async def start_process(msg):
    text = """REGISTRATIONüëæ\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Å–≤–æ–µ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏üëå"""
    await msg.answer(text, reply_markup=send_phone_kb())






#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞
@dp.message_handler(content_types=types.ContentType.CONTACT)
async def phone_handler(msg):

    phone_number = msg.contact.phone_number
    user_id = msg.from_user.id

    #–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏ –≤—Ö–æ–¥–∏–º 
    await add_or_check_phone(phone_number, user_id)


    await msg.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏!", reply_markup=types.ReplyKeyboardRemove())
    
    #–í—ã–±–æ—Ä AI
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ AI:", reply_markup=choose_ai_kb())






# –ö–æ–º–∞–Ω–¥–∞ CHOOSEAI
@dp.message_handler(commands=["chooseai"])
async def chooseAI_process(msg):
    #–ó–∞–ª–æ–≥–∏–Ω–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user_id = msg.from_user.id
    user_exists = await user_logged(user_id)


    #–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ª–æ–≥–∏–Ω–µ–Ω, –≤—ã–±–∏—Ä–∞–µ–º AI
    if user_exists:
        await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ AI:", reply_markup=choose_ai_kb())

    #–ï—Å–ª–∏ –Ω–µ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω, —Ç–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    else:
        await start_process(msg)






#–ö–æ–º–∞–Ω–¥–∞ DELETECONTEXT
@dp.message_handler(commands=["deletecontext"])
async def deletecontext_process(msg):
    global all_messages

    # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = msg.from_user.id
    #–ó–∞–ª–æ–≥–∏–Ω–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user_exists = await user_logged(user_id)



    #–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
    if user_exists:
        #–°—Ç–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        all_messages[user_id] = []
        await msg.answer("–î–∞–Ω–Ω—ã–µ —Å—Ç–µ—Ä—Ç—ãüòò")

    # –ï—Å–ª–∏ –Ω–µ—Ç, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    else:
        await start_process(msg)



    





# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback gpt_button
@dp.callback_query_handler(text="gpt_button") #text - –¢–æ, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å –∫–Ω–æ–ø–∫–æ–π
async def product_location(call):
    user_id = call["from"].id
    ai_name = "ChatGPT-3.5"

    #–ú–µ–Ω—è–µ–º –ø–æ–ª–µ ai –Ω–∞ ChatGPT
    await ai_field_update(user_id, ai_name)

    text = """‚ö°Ô∏èThe bot uses the same model as the ChatGPT website: gpt-3.5-turbo.

Here you can perform a wide variety of natural language tasks, such as:

1. Copywriting and rewriting
2. Writing and editing code
3. Translation from any language
4. Parsing unstructured text and summarization
5. Chat

You can ask questions in any language. However, the most accurate and exciting responses seem to be in English.

Be aware: the bot may occasionally generate incorrect information and has limited knowledge of the world and events after 2021.

‚úâÔ∏è To get a text response, write your question into the chat.

üîÑ To delete your context, send a command '/deletecontext'.

Have fun!"""

    await bot.send_message(call.message.chat.id, text=text)
    await call.answer()








#–î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ AI, –∫–æ–≥–¥–∞ –ø–æ–ª—É—á–∞–µ–º –ª—é–±–æ–π —Ç–µ–∫—Å—Ç, –ø—Ä–∏ —ç—Ç–æ–º –º—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ª–æ–≥–∏–Ω–µ–Ω–Ω—ã.
@dp.message_handler(content_types=["text"])
async def qwestion_handler(msg):
    global all_messages

    # –∑–∞–ª–æ–≥–∏–Ω–µ–Ω–Ω—ã –ª–∏ –º—ã:
    user_id = msg.from_user.id
    user_exists = await user_logged(user_id)

    #True –µ—Å–ª–∏ –ø–æ–ª–µ    ai   –∑–∞–ø–æ–ª–Ω–µ–Ω–æ
    ai_exist = await ai_exists(user_id)


    #–ï—Å–ª–∏ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω–Ω—ã
    if user_exists:
        #–ï—Å–ª–∏ –ø–æ–ª–µ ai –Ω–µ None
        if ai_exist:


            #ChatGPT-3.5
            if ai_exist == "ChatGPT-3.5":
                reply_msg = await msg.reply("üëª–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")
                ################################       ChatGPT Sender     ##############################################


                # –°–∞–º –≤–æ–ø—Ä–æ—Å
                question = msg.text

                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å –≤ –±–¥
                if all_messages.get(user_id, False):
                    all_messages[user_id].append({"role": "user", "content": question})
                else:
                    all_messages[user_id] = [{"role": "user", "content": question}]


                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
                loop = asyncio.get_running_loop()
                completion = await loop.run_in_executor(None, sent_question, all_messages[user_id])


                # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
                answer = completion.choices[0].message.content

                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –ø–∞–º—è—Ç—å, –¥–ª—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
                all_messages[user_id].append({"role": "assistant", "content": answer})


                # –ö tryes + 1
                await tryes_plus_one(user_id)


                await reply_msg.delete()
                await msg.reply(answer)


                ######################################################################################################

            else:
                await msg.answer("–ò–∑–≤–∏–Ω—è—é—Å—å, –Ω–æ —ç—Ç–æ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –µ—â–µ –Ω–µ –≤–≤–µ–¥–µ–Ωü´§")





        #–ï—Å–ª–∏ –ø—É—Å—Ç–æ–µ —Ç–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º
        else:
            await chooseAI_process(msg)

    # –ï—Å–ª–∏ –Ω–µ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω–Ω—ã, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ start
    else:
        await start_process(msg)














if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)