import openai, asyncio, logging, more_itertools
from config import *
from aiogram import Dispatcher, Bot, executor, types
from bd_handlers import *


#–õ–æ–≤–∏–º –æ—à–∏–±–∫–∏
logging.basicConfig(level=logging.INFO, filename="log.log", filemode="w", format='%(asctime)s %(message)s')


bot = Bot(TGToken)
dp = Dispatcher(bot)

#–ü–æ–¥–∫–ª—é—á–∞–µ–º API
openai.api_key = GPTToken
#–í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
all_messages = {}


print(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!\nTG - {TGToken}\nGPT - {GPTToken}")


#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –∫ Chat Gpt
async def sent_question(messages):
    completion = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=messages
        )
    
    return completion


#–ü–æ–¥—Å—á–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
#user_ai_context  -  [{'role': 'user', 'content': 'YOUR QUESTION'}, {'role': 'assistant', 'content': 'AI ANSWER'}]
async def get_len_of_context(user_ai_context):
    len_of_context = 0
    for block in user_ai_context:
        len_of_context += len(block["content"])

    return len_of_context






# –ö–æ–º–∞–Ω–¥–∞ START
@dp.message_handler(commands=["start"])
async def start_process(msg):
    # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = msg.from_user.id

    text = """‚ö°Ô∏è–ë–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç—É –∂–µ –º–æ–¥–µ–ª—å, —á—Ç–æ –∏ —Å–∞–π—Ç ChatGPT: gpt-3.5-turbo.

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å —à–∏—Ä–æ–∫–∏–π —Å–ø–µ–∫—Ç—Ä –∑–∞–¥–∞—á, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —è–∑—ã–∫–æ–º, —Ç–∞–∫–∏—Ö –∫–∞–∫:

1. –ö–æ–ø–∏—Ä–∞–π—Ç–∏–Ω–≥ –∏ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤
2. –ù–∞–ø–∏—Å–∞–Ω–∏–µ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞
3. –ü–µ—Ä–µ–≤–æ–¥ —Å –ª—é–±–æ–≥–æ —è–∑—ã–∫–∞
4. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–æ–∫
5. –ß–∞—Ç

–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –ª—é–±–æ–º —è–∑—ã–∫–µ. –û–¥–Ω–∞–∫–æ —Å–∞–º—ã–µ —Ç–æ—á–Ω—ã–µ –∏ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –æ–±—ã—á–Ω–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ.

–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: –±–æ—Ç –º–æ–∂–µ—Ç –≤—Ä–µ–º—è –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –∏–º–µ—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –∑–Ω–∞–Ω–∏—è –æ –º–∏—Ä–µ –∏ —Å–æ–±—ã—Ç–∏—è—Ö –ø–æ—Å–ª–µ 2021 –≥–æ–¥–∞.

üîÑ –ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É ¬´/deletecontext¬ª.

‚úâÔ∏è –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç.

–í–µ—Å–µ–ª–∏—Ç–µ—Å—å!"""

    #–î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–¥
    await add_or_check_user(user_id=user_id)

    await msg.answer(text)



#–ö–æ–º–∞–Ω–¥–∞ DELETECONTEXT
@dp.message_handler(commands=["deletecontext"])
async def deletecontext_process(msg):
    global all_messages

    # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = msg.from_user.id

    #–°—Ç–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    all_messages[user_id] = []
    await msg.answer("–î–∞–Ω–Ω—ã–µ —Å—Ç–µ—Ä—Ç—ãüòò")




#–î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ AI, –∫–æ–≥–¥–∞ –ø–æ–ª—É—á–∞–µ–º –ª—é–±–æ–π —Ç–µ–∫—Å—Ç
@dp.message_handler(content_types=["text"])
async def qwestion_handler(msg):
    global all_messages

    user_id = msg.from_user.id


    #–°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç
    if not all_messages.get(user_id, False):
        all_messages[user_id] = []


    reply_msg = await msg.reply("üëª–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")
    await msg.answer_chat_action("typing")

    #–î–µ–ª–∞—é 2 –ø–æ–ø—ã—Ç–∫–∏
    for t in range(3):
        try:
            ################################       ChatGPT Sender     ##############################################
            # –°–∞–º –≤–æ–ø—Ä–æ—Å
            question = msg.text
            dict_with_question = {"role": "user", "content": question}


            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å –≤ all_messages
            if t == 0:
                all_messages[user_id].append(dict_with_question)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
            completion = await sent_question(all_messages[user_id])

            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
            answer = completion.choices[0].message.content

            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –ø–∞–º—è—Ç—å, –¥–ª—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
            all_messages[user_id].append({"role": "assistant", "content": answer})

            if t == 0:
                # –ö tryes + 1
                await tryes_plus_one(user_id)

                

            #–†–∞–∑–¥–µ–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ 3300 —Å–∏–º–≤–æ–ª–æ–≤, –∏–∑-–∑–∞ –≤—Ä–µ–¥–Ω–æ—Å—Ç–∏ —Ç–≥
            answer = list(more_itertools.sliced(answer, 3300))
            for ans in answer:
                await msg.reply(ans)

            #–ï—Å–ª–∏ –Ω–µ—Ç –æ—à–∏–±–æ–∫, —Ç–æ –Ω–µ –¥–µ–ª–∞–µ–º 2 –ø–æ–ø—ã—Ç–∫—É
            break
            ######################################################################################################

        #–ü—Ä–∏ –æ—à–∏–±–∫–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        except Exception as e:
            print(e.__class__.__name__)


            #–û–ª–∞–≤–ª–∏–º–∞–µ–º –ª–∏–º–∏—Ç –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
            if e.__class__.__name__ in ["InvalidRequestError", "RateLimitError"]:
                all_messages[user_id] = all_messages[user_id][-2:]

                #–û–±–Ω—É–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if t == 2:
                    all_messages[user_id] = [dict_with_question]

                if t == 0:
                    await msg.answer("""–ü–æ –ø—Ä–∞–≤–∏–ª–∞–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ChatGPT –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –¥–∏–∞–ª–æ–≥–µ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å –ª–∏–º–∏—Ç —Å–ª–æ–≤
=> –Ø –±—ã–ª –≤—ã–Ω—É–∂–¥–µ–Ω –∑–∞–±—ã—Ç—å –≤–∞—à –¥–∏–∞–ª–æ–≥, –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 2 –≤–æ–ø—Ä–æ—Å–æ–≤.
–ù–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –æ–±—â–µ–Ω–∏–µüëå""")
                await asyncio.sleep(6)
                continue


            if t == 2:
                await msg.answer("ChatGPT –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.")
                continue

    await reply_msg.delete()



if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)